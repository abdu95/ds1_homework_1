knitr::opts_chunk$set(echo = TRUE)
data <- USArrests
print(skim(data))
library(tidyverse)
library(caret)
library(skimr)
library(janitor)
library(factoextra) # provides nice functions for visualizing the output of PCA
library(NbClust) # for choosing the optimal number of clusters
library(knitr)
library(kableExtra)
theme_set(theme_minimal())
View(data)
data <- USArrests
print(skim(data))
colnames(data)
ggplot(data = data, aes(x = Murder)) +
geom_histogram() +
labs(x = "Murder") +
scale_x_continuous(labels = comma)
library(scales)
ggplot(data = data, aes(x = Murder)) +
geom_histogram() +
labs(x = "Murder") +
scale_x_continuous(labels = comma)
summary(data$Murder) %>%
tidy() %>%
kable(digits = 3) %>%
kable_styling(full_width = F)
library(broom)
summary(data$Murder) %>%
tidy() %>%
kable(digits = 3) %>%
kable_styling(full_width = F)
df_murder_assault <- select(data, Murder, Assault)
ggplot(df_murder_assault, aes(Murder, Assault)) +
geom_point()
# de-mean the data for easier visualizations and comparisons
data_demean <- mutate(data, across(everything(), ~ .x - mean(.x)))
# scale the data to avoid overweighting variables with large values (for example "assault" VS "murder")
# data_demean_scaled <-  mutate(data_demean, across(everything(), ~ .x / sd(.x)))
pre_process <- preProcess(data, method = c("center", "scale", "pca"), thresh = 0.999)
View(pre_process)
View(pre_process)
pre_process$dim
pre_process$rotation
pre_process <- preProcess(data, method = c("center", "scale", "pca"), thresh = 0.999)
pre_process$rotation %>%
tidy() %>%
kable(digits = 3) %>%
kable_styling(full_width = F)
pre_process <- preProcess(data, method = c("center", "scale", "pca"), thresh = 0.999)
pre_process$rotation %>%
kable(digits = 3) %>%
kable_styling(full_width = F)
fviz_nbclust(data_demean, kmeans, method = "wss")
nb <- NbClust(data_demean, method = "kmeans", min.nc = 2, max.nc = 10, index = "all")
nb
View(nb)
nb$Best.partition
nb$Best.nc
nb$All.CriticalValues
nb$All.index
hist(nb$Best.nc[1,],breaks = 15)
set.seed(2002)
km <- kmeans(df_demean, centers = 2) # number of clusters 2
set.seed(2002)
km <- kmeans(data_demean, centers = 2) # number of clusters 2
data_demean_clusters <- mutate(data_demean, cluster = factor(km$cluster))
ggplot(data_demean_clusters, aes(x = Murder, y = UrbanPop, color = cluster)) +
geom_point()
View(data)
set.seed(2002)
km <- kmeans(data_demean, centers = 2) # number of clusters 2
data_demean_clusters <- mutate(data_demean, cluster = factor(km$cluster))
ggplot(data_demean_clusters, aes(x = Rape, y = UrbanPop, color = cluster)) +
geom_point()
View(data)
set.seed(2002)
km <- kmeans(data_demean, centers = 2) # number of clusters 2
data_demean_clusters <- mutate(data_demean, cluster = factor(km$cluster))
ggplot(data_demean_clusters, aes(x = Assault, y = UrbanPop, color = cluster)) +
geom_point()
# get principal components
pca_result <- prcomp(data, scale = TRUE)
# get just the first 2 PC's
first_two_pc <- as_tibble(pca_result$x[, 1:2])
# show PC1 and PC2 with annotation
ggplot(first_two_pc, aes(x = PC1, y = PC2)) +
geom_point() +
annotate("segment", x = -0.6, xend = -0.2, y = -1.5, yend = 2,
colour = "blue") +
annotate("text", x = c(-2,1), y = c(2,2), label = c("Group A", "Group B"), color = "red", size = 5)
# PCs and clustered data shown together
ggplot(first_two_pc, aes(x = PC1, y = PC2)) +
geom_point() +
geom_point(data = data_demean_clusters, aes(x = Murder, y = UrbanPop, color = cluster)) +
labs(x = "PC1 / Murder", y = "PC2 / UrbanPop")+
annotate("text", x = c(-2,1), y = c(2,2), label = c("Group A", "Group B"), color = "red", size = 5)
# PCs and clustered data shown together
ggplot(first_two_pc, aes(x = PC1, y = PC2)) +
geom_point() +
geom_point(data = data_demean_clusters, aes(x = Assault, y = UrbanPop, color = cluster)) +
labs(x = "PC1 / Murder", y = "PC2 / UrbanPop")+
annotate("text", x = c(-2,1), y = c(2,2), label = c("Group A", "Group B"), color = "red", size = 5)
# get principal components
pca_result <- prcomp(data, scale = TRUE)
# get just the first 2 PC's
first_two_pc <- as_tibble(pca_result$x[, 1:2])
# show PC1 and PC2 with annotation
ggplot(first_two_pc, aes(x = PC1, y = PC2)) +
geom_point() +
annotate("text", x = c(-2,1), y = c(2,2), label = c("Group A", "Group B"), color = "red", size = 5)
# get principal components
pca_result <- prcomp(data, scale = TRUE)
# get just the first 2 PC's
first_two_pc <- as_tibble(pca_result$x[, 1:2])
# show PC1 and PC2 with annotation
ggplot(first_two_pc, aes(x = PC1, y = PC2)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
genes <- read_csv("https://www.statlearning.com/s/Ch10Ex11.csv", col_names = FALSE) %>%
t() %>% as_tibble()  # the original dataset is of dimension 1000x40 so we transpose it
library(tidyverse)
genes <- read_csv("https://www.statlearning.com/s/Ch10Ex11.csv", col_names = FALSE) %>%
t() %>% as_tibble()  # the original dataset is of dimension 1000x40 so we transpose it
dim(data)
View(genes)
genes <- read_csv("https://www.statlearning.com/s/Ch10Ex11.csv", col_names = FALSE) %>%
t() %>% as_tibble()  # the original dataset is of dimension 1000x40 so we transpose it
dim(genes)
pca_result <- prcomp(genes, scale = TRUE)
View(pca_result)
fviz_pca_ind(pca_result)
??fviz_pca_ind
library(tidyverse)
library(factoextra)
fviz_pca_ind(pca_result)
pca_result <- prcomp(genes, scale = TRUE)
fviz_contrib(pca_result, "var", axes = 1, top=5)
